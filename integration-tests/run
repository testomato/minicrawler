#!/usr/bin/php
<?php
const DEFAULT_HTTPBIN_URL = 'http://127.0.0.1:80';

$errors = [];

/**
 * Default error handler
 * @param $errno
 * @param $errstr
 * @param $errfile
 * @param $errline
 * @return bool
 */
function errorHandler($errno, $errstr, $errfile, $errline): bool {
	global $errors;
	$errors[] = [$errno, $errstr, $errfile, $errline];
	return true;
}

set_error_handler('errorHandler');

/**
 * Load test cases the array of closures
 * @var array $tests
 */
$tests = require_once __DIR__ . '/test_cases.php';

echo '1..' . count($tests) . "\n";

foreach ($tests as $test) {
	try {
		call_user_func($test);
		echo "ok" . PHP_EOL;
	} catch (Exception|\TestFailedException $e) {
		$source = source($test);
		echo "not ok {$e->getMessage()}\n" . $source;
	}
}

/**
 * Return source code of a closure
 */
function source(Closure $test): string {
	try {
		$f = new ReflectionFunction($test);
		$lines = file($f->getFileName());
		$from = $f->getStartLine() - 1;
		$to = $f->getEndLine();
		return PHP_EOL . implode('', array_slice($lines, $from, $to - $from)) . PHP_EOL;
	} catch (ReflectionException $e) {
		return '';
	}
}

/**
 * Return full url
 * @param string $path
 * @return string
 */
function url(string $path = ''): string {
	global $argv;
	if (isset($argv[1])) {
		return rtrim($argv[1], '/') . $path;
	} elseif (getenv('HTTPBIN_URL')) {
		return rtrim(getenv('HTTPBIN_URL'), '/') . $path;
	} else {
		return DEFAULT_HTTPBIN_URL . $path;
	}
}


/**
 * Return url host
 * @return string
 */
function host(): string {
	return parse_url(url(), PHP_URL_HOST) ?: '127.0.0.1';
}

/**
 * @throws TestFailedException
 */
function check_result_for_path($path, array $args, array $checks): void {
	$argsString = '';

	foreach ($args as $flag => $arg) {
		$argsString .= ' ' . (is_string($flag) ? $flag . ' ' . escapeshellarg($arg) : $arg);
	}

	$cli = __DIR__ . "/../minicrawler5 $argsString  " . escapeshellarg(url($path));

	if (!file_exists(__DIR__ . '/../minicrawler5')) {
		throw new TestFailedException("minicrawler5 not found in " . __DIR__ . "/../minicrawler5");
	}

	$result = shell_exec($cli);


	echo $result;

	$lines = explode("\n", $result);
	$headers = [];
	$cookies = [];
	$body = '';

	while ($line = array_shift($lines)) {
		if ($line === '') break;
		$p = strpos($line, ':');
		$key = $p !== false ? substr($line, 0, $p) : null;
		$val = substr($line, $p === false ? 0 : $p + 2);
		if ($key == 'Cookies') {
			for ($i = 0; $i < $val; $i++) {
				$cookies[] = array_shift($lines);
			}
		} elseif (isset($headers[$key])) {
			if (is_array($headers[$key])) {
				$headers[$key][] = $val;
			} else {
				$headers[$key] = [$headers[$key], $val];
			}
		} else {
			$headers[$key] = $val;
		}
	}

	$headers['Cookies'] = $cookies;
	$body = implode("\n", $lines);
	$result = json_decode($body, true);
	if (!$result) {
		$result = $body;
	}

	foreach ($checks as $check) {
		list($expected, $actual, $msg) = $check($result, $headers);
		if ($expected !== $actual) {
			foreach ([&$expected, &$actual] as &$arr) {
				if (is_array($arr)) {
					$arr = trim(preg_replace('/^Array\s*\((.*)\)\s*$/s', '\1', print_r($arr, true)));
				} else {
					$arr = var_export($arr, true);
				}
			}
			$msg = "$msg\n    $expected\n but got\n    $actual\n";
			if ($errs = getErrors()) {
				$msg .= "    " . implode("\n    ", $errs) . "\n";
			}
			$msg .= " for: $cli\n";
			throw new TestFailedException($msg);
		}
	}

	if ($msg = getErrors()) throw new TestFailedException(implode("\n    ", $msg));
}

/**
 * @throws TestFailedException
 */
class TestFailedException extends Exception {
}


/**
 * @return array
 */
function getErrors(): array {
	global $errors;
	$msg = [];
	while (($err = array_shift($errors))) {
		$msg[] = "$err[1] on line $err[3]";
	}
	return $msg;
}
